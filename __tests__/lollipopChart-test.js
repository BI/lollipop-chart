jest.unmock('../src/lollipopChart.js');
jest.unmock('../node_modules/d3/d3.js');

var d3 = require('../node_modules/d3/d3.js');
describe('LollipopChart', function() {

  // -----------------------------------------------------------------------------------
  // All of the unit tests for data calculations go here separate from the svg rendering
  // -----------------------------------------------------------------------------------
  describe('chart calculations', function() {
    var PARENT_ID = 'test';
    var LollipopChart = require('../src/lollipopChart.js')('#' + PARENT_ID);

    var data = [
      {country: 'Afghanistan', value: 80, average: 60},
      {country: 'Bangladesh', value: 50, average: 50},
      {country: 'Bhutan', value: 5, average: 35},
      {country: 'India', value: 100, average: 55},
      {country: 'Maldives', value: 25, average: 30},
      {country: 'Nepal', value: 35, average: 40},
      {country: 'Pakistan', value: undefined, average: 60},
      {country: 'Sri Lanka', value: 65, average: 50},
    ];

    var HEIGHT = 200, WIDTH = 100, BAR_GAP = 5, GUTTER_X = 30, GUTTER_Y = 8;
    LollipopChart
      .width(WIDTH)
      .height(HEIGHT)
      .barGap(BAR_GAP)
      .chartGutter([GUTTER_X, GUTTER_Y])
      .nameAccessor(function(d) { return d.country; })
      .comparisonValueAccessor(function(d) { return d.average; })
      .data(data); //Note: we passed the data to the chart but no rendering is occuring 

    // This y scale should be equivalent to the yScale generated by the chart when no scale is specified
    var yScale = d3.scale.linear()
      .domain([d3.min(data, LollipopChart.valueAccessor()), d3.max(data, LollipopChart.valueAccessor())])
      .range([0, HEIGHT - LollipopChart.chartGutter()[1]]);

    // This x scale should be equivalent to the xScale generated by the chart
    var xScale = d3.scale.linear().domain([0, data.length]).range([GUTTER_X, WIDTH + BAR_GAP - GUTTER_X]);

    it('should have a height set for the chart', function() {
      expect(LollipopChart.height()).toEqual(HEIGHT);
    });

    it('should have a width set for the chart', function() {
      expect(LollipopChart.width()).toEqual(WIDTH);
    });

    it('should calculate the correct x-scale domain', function() {
      var expectedDomain = xScale.domain();
      var generatedDomain = LollipopChart.xScale().domain();

      expect(generatedDomain[0]).toEqual(expectedDomain[0]);
      expect(generatedDomain[1]).toEqual(generatedDomain[1]);
    });

    it('should calculate the correct x-scale range', function() {
      var expectedRange = xScale.range();
      var generatedRange = LollipopChart.xScale().range();

      expect(generatedRange[0]).toEqual(expectedRange[0]);
      expect(generatedRange[1]).toEqual(expectedRange[1]);
    });

    it('should calculate bar height correctly for the comparisonValue of Bangladesh', function() {
      var dataObj = getObject('Bangladesh', LollipopChart.nameAccessor());
      var expectedBarHeight = yScale(LollipopChart.comparisonValueAccessor()(dataObj));
      var generatedBarHeight = LollipopChart.generateBarHeight(dataObj);

      expect(generatedBarHeight).toEqual(expectedBarHeight);
    });

    it('should calculate bar width correctly taking into account bar gaps', function() {
      // Note the bar width calculation uses the whole chart width plus one bar gap on purpose so the last bar appears to have no gap on the right
      var expectedBarWidth = (WIDTH + BAR_GAP) / data.length - BAR_GAP;
      var generatedBarWidth = LollipopChart.generateBarWidth();

      expect(generatedBarWidth).toEqual(expectedBarWidth);
      expect(BAR_GAP).toEqual(LollipopChart.barGap());
    });

    it('should calculate the correct lollipop y position for bad/no data', function() {
      var expectedY = HEIGHT + LollipopChart.lollipopRadius();
      var generatedY = LollipopChart.generateLollipopY(data[6]);

      expect(generatedY).toEqual(expectedY);
    });

    it('should calculate the correct line end position for bad/no data', function() {
      var expectedY = HEIGHT;
      var generatedY = LollipopChart.generateLineY2(data[6]);

      expect(generatedY).toEqual(expectedY);
    });

    it('should calculate the correct bar height for bad/no data', function() {
      var expectedHeight = 0;
      var generatedHeight = LollipopChart.generateBarHeight(data[6]);

      expect(generatedHeight).toEqual(expectedHeight);
    });

    it('should choose the correct color for bad/no data', function() {
      var noDataColor = "#bbb";
      LollipopChart.noDataColor(noDataColor);

      expect(LollipopChart.noDataColor()).toEqual(noDataColor);
      expect(LollipopChart.colorAccessor(data[6])).toEqual(noDataColor);
    });

    it('should set the lollipop height above the bar for a value above its comparisonValue like for Afghanistan', function() {
      var heights = generatedHeights('Afghanistan', LollipopChart.nameAccessor());
      var lollipopHeight = heights.lollipopHeight;
      var barHeight = heights.barHeight;

      expect(lollipopHeight).toBeGreaterThan(barHeight);
    });

    it('should set the lollipop height below the bar for a value below its comparisonValue like for Maldives', function() {
      var heights = generatedHeights('Maldives', LollipopChart.nameAccessor());
      var lollipopHeight = heights.lollipopHeight;
      var barHeight = heights.barHeight;

      expect(lollipopHeight).toBeLessThan(barHeight);
    });

    it('should set the lollipop at the same height as the bar if the value is equal to the comparisonValue like for Bangladesh', function() {
      var heights = generatedHeights('Bangladesh', LollipopChart.nameAccessor());
      var lollipopHeight = heights.lollipopHeight;
      var barHeight = heights.barHeight;

      expect(lollipopHeight).toEqual(barHeight);
    });

    it('should set the lollipop height at the top of the chart(and not clipped) for a value that is equal to the max like India', function() {
      var generatedLollipopHeight = generatedHeights('India', LollipopChart.nameAccessor()).lollipopHeight;
      var radius = LollipopChart.lollipopRadius();
      var expectedLollipopHeight = yScale.range()[1];

      expect(generatedLollipopHeight).toEqual(expectedLollipopHeight);
    });

    it('should set the lollipop height at the bottom of the chart(and not clipped) for a value that is equal to the min', function() {
      var generatedLollipopHeight = generatedHeights('Bhutan', LollipopChart.nameAccessor()).lollipopHeight;
      var radius = LollipopChart.lollipopRadius();
      var expectedLollipopHeight = 0;

      expect(generatedLollipopHeight).toEqual(expectedLollipopHeight);
    });

    it('should color code the lollipops', function() {
      var generatedColorScale = LollipopChart.colorScale();
      var expectedColorScale = d3.scale.category10().domain(data.map(LollipopChart.nameAccessor()));

      expect(generatedColorScale('Bhutan')).toEqual(expectedColorScale('Bhutan'));
    });

    it('should have the ability to use custom data accessors', function() {
      //Example use of the accessor
      var listOfComparisonValues = data.map(LollipopChart.comparisonValueAccessor());

      expect(listOfComparisonValues[2]).toEqual(data[2].average);
    });

    // The y scale can be set as a global scale and also individually per data
    describe('y scale api', function() {
      var PARENT_ID_WITH_SCALE = 'test-with-scale';
      var LollipopChartWithScale = require('../src/lollipopChart.js')('#' + PARENT_ID_WITH_SCALE);

      var PARENT_ID_WITH_INDIVIDUAL_SCALE = 'test-with-individual-scales';
      var LollipopChartWithIndividualScales = require('../src/lollipopChart.js')('#' + PARENT_ID_WITH_INDIVIDUAL_SCALE);

      var dataIndividualScales = [
        {name: 'Afghanistan', value: 80, comparisonValue: 60, scale: d3.scale.linear().domain([40, 100])},
        {name: 'Bangladesh', value: 50, comparisonValue: 50, scale: d3.scale.linear().domain([40, 60])},
        {name: 'Bhutan', value: 5, comparisonValue: 35, scale: d3.scale.linear().domain([0, 50])},
        {name: 'India', value: 100, comparisonValue: 55, scale: d3.scale.linear().domain([40, 100])},
        {name: 'Maldives', value: 25, comparisonValue: 30, scale: d3.scale.linear().domain([0, 50])},
        {name: 'Nepal', value: 35, comparisonValue: 40, scale: d3.scale.linear().domain([35, 60])},
        {name: 'Pakistan', value: 50, comparisonValue: 60, scale: d3.scale.linear().domain([40, 100])},
        {name: 'Sri Lanka', value: 65, comparisonValue: 50, scale: d3.scale.linear().domain([40, 100])},
      ];

      // This y scale is used to test the scale api
      var yScaleGlobal = d3.scale.linear().domain([0, 100]);

      // This y scale is used to test the individual scale api
      var yScaleIndividual = d3.scale.linear().domain([40, 60]);

      // Use the yScale api
      LollipopChartWithScale.yScale(yScaleGlobal).data(data);
      LollipopChartWithIndividualScales.data(dataIndividualScales);

      it('should calculate a relative scale based on input data if no scale is set by the developer', function() {
        var expectedDomain = yScale.domain();
        var generatedDomain = LollipopChart.yScale().domain();

        expect(generatedDomain[0]).toEqual(expectedDomain[0]);
        expect(generatedDomain[1]).toEqual(expectedDomain[1]);
      });

      it('should allow the developer to set a global scale', function() {
        var expectedDomain = yScaleGlobal.domain();
        var generatedDomain = LollipopChartWithScale.yScale().domain();

        expect(generatedDomain[0]).toEqual(expectedDomain[0]);
        expect(generatedDomain[1]).toEqual(expectedDomain[1]);
      });

      it('should allow the developer to set individual scales per data, like for Bangladesh', function() {
        // use the yscale accessor to get the individual scale for the data for Bangladesh in dataIndividualScales
        var expectedDomain = yScaleIndividual.domain();
        var generatedDomain = LollipopChartWithIndividualScales.yScaleAccessor()({name: 'Bangladesh', value: 50, comparisonValue: 50, scale: d3.scale.linear().domain([40, 60])}).domain();
      
        expect(generatedDomain[0]).toEqual(expectedDomain[0]);
        expect(generatedDomain[1]).toEqual(expectedDomain[1]);
      });
    });

    //helper functions
    function getObject(memberValue, accessorFunc) {
      var memberIndex = data.map(accessorFunc).indexOf(memberValue);

      return data[memberIndex];
    }

    function generatedHeights(memberValue, accessorFunc) {
      var dataObj = getObject(memberValue, accessorFunc);
      var lollipopHeight = LollipopChart.generateLollipopHeight(dataObj);
      var barHeight = LollipopChart.generateBarHeight(dataObj);

      return {barHeight: barHeight, lollipopHeight: lollipopHeight};
    }
  });

  // --------------------------------------------------------
  // Unit tests to cover remaining portions of the chart api 
  // --------------------------------------------------------
  describe('remaining coverage', function() {
    var PARENT_ID = 'test';
    var LollipopChart = require('../src/lollipopChart.js')('#' + PARENT_ID);

    var yScaleOther = d3.scale.linear().domain([0, 80]);
    var data = [
      {name: 'Afghanistan', someValueProperty: 80, comparisonValue: 60, scaleOther: yScaleOther},
      {name: 'Bangladesh', someValueProperty: 50, comparisonValue: 50},
      {name: 'Bhutan', someValueProperty: 5, comparisonValue: 35},
      {name: 'India', someValueProperty: 100, comparisonValue: 55},
      {name: 'Maldives', someValueProperty: 25, comparisonValue: 30},
      {name: 'Nepal', someValueProperty: 35, comparisonValue: 40},
      {name: 'Pakistan', someValueProperty: 50, comparisonValue: 60},
      {name: 'Sri Lanka', someValueProperty: 65, comparisonValue: 50},
    ];

    // This is an internal function that will most likely not be used by the developer
    it('should have a setter for the y-scale accessor function', function() {
      var yScaleAccessor = function(d) {
        if(d.scaleOther) return d.scaleOther;
        if(d.scale) return d.scale;

        return LollipopChart.yScale();
      };

      LollipopChart.yScaleAccessor(yScaleAccessor);
      var chartYScale = LollipopChart.yScaleAccessor()(data[0]);

      expect(chartYScale.domain()[0]).toEqual(yScaleOther.domain()[0]);
      expect(chartYScale.domain()[1]).toEqual(yScaleOther.domain()[1]);
    });

    it('should have a setter for the color-scale', function() {
      var colorScale = d3.scale.category20c().domain(data.map(LollipopChart.nameAccessor()));

      LollipopChart.colorScale(colorScale);

      expect(LollipopChart.colorScale().domain()[0]).toEqual(colorScale.domain()[0]);
      expect(LollipopChart.colorScale().domain()[19]).toEqual(colorScale.domain()[19]);
    });


    it('should have a setter for the lollipop radius', function() {
      var radius = 35;
      LollipopChart.lollipopRadius(radius);

      expect(LollipopChart.lollipopRadius()).toEqual(radius);
    });

    it('should have a setter for the chart gutter', function() {
      var gutterX = 35;
      var gutterY = 8;
      var gutter = [gutterX, gutterY];
      LollipopChart.chartGutter(gutter);

      expect(LollipopChart.chartGutter()).toEqual(gutter);
    });

    it('should have a setter for the value accessor function', function() {
      var valueAccessorFunc = function(d) { return d.someValueProperty; };
      LollipopChart.valueAccessor(valueAccessorFunc);

      expect(LollipopChart.valueAccessor()(data[0])).toEqual(80);
    });

    it('should have a comparisonValueAccessor function that fetches the comparisonValue', function() {
      var comparisonValue = LollipopChart.comparisonValueAccessor()(data[1]);

      expect(comparisonValue).toEqual(data[1].comparisonValue);
    });

    it('should have a setter getter for transition duration', function() {
      var transitionDuration = 500;
      LollipopChart.transitionDuration(transitionDuration);

      expect(LollipopChart.transitionDuration()).toEqual(transitionDuration);
    });

    it('should have a getter/setter for tooltip content function', () => {
      var expectedContentFunc = function(d) { return "<em>content test</em>" + d.name; };
      LollipopChart.tooltipContent(expectedContentFunc);
      var actualContentFunc = LollipopChart.tooltipContent();

      expect(actualContentFunc).toEqual(expectedContentFunc);
    });

  });

  // --------------------------------------------------------------------------
  // All of the unit tests to show that the chart is correctly rendered go here
  // --------------------------------------------------------------------------
  describe('chart rendering', function() {
    var PARENT_ID = 'test';
    // Add the parent element to the document
    document.body.innerHTML = '<div id=' + PARENT_ID + '></div>';
    var LollipopChart = require('../src/lollipopChart.js')('#' + PARENT_ID);

    var data = [
      {country: 'Afghanistan', value: 80, average: 60},
      {country: 'Bangladesh', value: 50, average: 50},
      {country: 'Bhutan', value: 5, average: 35},
      {country: 'India', value: 100, average: 55},
      {country: 'Maldives', value: 25, average: 30},
      {country: 'Nepal', value: 35, average: 40},
      {country: 'Pakistan', value: undefined, average: 60},
      {country: 'Sri Lanka', value: 65, average: 50},
    ];

    var HEIGHT = 200, WIDTH = 100, BAR_GAP = 5;
    LollipopChart
      .width(WIDTH)
      .height(HEIGHT)
      .barGap(BAR_GAP)
      .nameAccessor(function(d) { return d.country; })
      .comparisonValueAccessor(function(d) { return d.average; });

    it('should append an svg to the parent selection', function() {
      // Render the chart into the document
      LollipopChart.render(data);

      var svg = d3.select('#' + PARENT_ID + ' svg')[0][0];

      expect(svg).not.toBeNull();
    });

    it('should have set the data when render was called with data passed', function() {
      // Render the chart into the document
      LollipopChart.render(data);

      expect(LollipopChart.data()[5].country).toEqual('Nepal');
      expect(LollipopChart.data().length).toEqual(8);
    });

    it('should be able to render with data that was already set', function() {
      LollipopChart.data(data);
      LollipopChart.render();

      var svg = d3.select('#' + PARENT_ID + ' svg')[0][0];

      expect(svg).not.toBeNull();
      expect(LollipopChart.data()[0].country).toEqual(data[0].country);
    });

  });
  
});
